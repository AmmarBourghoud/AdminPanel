{"version":3,"sources":["views/Signals/SignalsMap.js"],"names":["SignalsMap","props","_isMounted","loadSignal","a","Promise","resolve","reject","setState","isLoading","wretch","url","get","json","res","items","catch","err","console","log","state","this","mapboxgl","accessToken","map","Map","container","Mapcontainer","style","center","zoom","on","loadImage","error","image","forEach","sig","addImage","_id","addLayer","id","type","source","data","features","properties","name","description","Moment","created_date","format","geometry","coordinates","localization","long","lat","layout","e","slice","Math","abs","lngLat","lng","Popup","setLngLat","setHTML","addTo","prevProps","prevState","snapshot","match","params","className","lg","ref","x","Component"],"mappings":"iWASMA,G,yDAGJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,YAAa,EAEM,EAiFnBC,WAjFmB,sBAiFN,sBAAAC,EAAA,+EACJ,IAAIC,SAAQ,SAACC,EAASC,GACvB,EAAKL,YACP,EAAKM,SAAS,CACZC,WAAW,IAEfC,cACGC,IADH,gCAEGC,MACAC,MAAK,SAAAC,GACA,EAAKZ,YACR,EAAKM,SAAS,CACbC,WAAW,EACXM,MAAOD,IAETR,EAAQQ,MAETE,OAAM,SAAAC,GACLC,QAAQC,IAAI,MAAOF,GACnBV,WAnBK,2CA/EX,EAAKa,MAAQ,CACXL,MAAO,GACPN,WAAW,GAJI,E,yLASjBY,KAAKnB,YAAa,E,SACAmB,KAAKlB,a,OAAjBW,E,OAENQ,IAASC,YAAc,8FAEnBC,EAAM,IAAIF,IAASG,IAAI,CACzBC,UAAWL,KAAKM,aAChBC,MAAO,oCACPC,OAAQ,CAAC,OAAQ,SACjBC,KAAM,MAGJC,GAAG,QAAQ,WACTP,EAAIQ,UAAU,kCAAd,uCAAiD,WAAeC,EAAOC,GAAtB,SAAA9B,EAAA,0DAC7C6B,EAD6C,sBAChCA,EADgC,uBAE3CnB,EAAIqB,SACR,SAAAC,GACAZ,EAAIa,SAASD,EAAIE,IAAKJ,GACtBV,EAAIe,SAAS,CACXC,GAAIJ,EAAIE,IACRG,KAAM,SACNC,OAAQ,CACND,KAAM,UACNE,KAAM,CACJF,KAAM,oBACNG,SAAU,CACR,CACEH,KAAM,UACNI,WAAY,CACV,YAAc,WAAYT,EAAIU,KAAM,eACpCV,EAAIW,YAAc,iBAAkBC,IAAOZ,EAAIa,cAAcC,OAAO,uBACpE,oBAFc,kBAEkBd,EAAIE,IAFtB,KAE8B,oDAE9Ca,SAAU,CACVV,KAAM,QACNW,YAAa,CAAChB,EAAIiB,aAAaC,KAAMlB,EAAIiB,aAAaE,UAM9DC,OAAQ,CACN,aAAcpB,EAAIE,IAClB,sBAAsB,KAG1Bd,EAAIO,GAAG,QAASK,EAAIE,KAAK,SAAUmB,GAGjC,IAFA,IAAIL,EAAcK,EAAEb,SAAS,GAAGO,SAASC,YAAYM,QACjDX,EAAcU,EAAEb,SAAS,GAAGC,WAAWE,YACpCY,KAAKC,IAAIH,EAAEI,OAAOC,IAAMV,EAAY,IAAM,KACjDA,EAAY,IAAMK,EAAEI,OAAOC,IAAMV,EAAY,GAAK,KAAO,KAEzD,IAAI9B,IAASyC,OACZC,UAAUZ,GACVa,QAAQlB,GACRmB,MAAM1C,SA1CsC,2CAAjD,4D,mJAmDNH,KAAKnB,YAAa,I,kFAGKiE,EAAWC,EAAWC,G,oEACzCF,EAAUG,MAAMC,OAAO/B,KAAOnB,KAAKpB,MAAMqE,MAAMC,OAAO/B,G,gCAClDnB,KAAKlB,a,0IA2BL,IAAD,OACP,OACE,yBAAKqE,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYD,UAAU,iCACpB,gCAAQ,uBAAGA,UAAU,mBAArB,iBAEF,kBAAC,IAAD,KACA,yBAAKA,UAAU,UAAUE,IAAK,SAACC,GAAQ,EAAKhD,aAAegD,c,GAtHhDC,cAgIV5E","file":"static/js/18.5a6837c2.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport {Badge, Card, CardBody, CardHeader, Col, Row, Table} from 'reactstrap';\r\nimport wretch from 'wretch';\r\nimport Moment from 'moment';\r\nimport mapboxgl from 'mapbox-gl'\r\nimport { relative } from 'path';\r\n\r\n\r\nclass SignalsMap extends Component {\r\n  _isMounted = false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: {},\r\n      isLoading: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    const res = await this.loadSignal();\r\n\r\n    mapboxgl.accessToken = 'pk.eyJ1IjoiY2VjZW5uYmwiLCJhIjoiY2szNGo3MHhxMDlqbTNwbzRtM2JnMG9iMiJ9.jPHdv3qcnvmAqe69UlA8LQ';\r\n\r\n    var map = new mapboxgl.Map({\r\n      container: this.Mapcontainer,\r\n      style: 'mapbox://styles/mapbox/streets-v9',\r\n      center: [2.4159, 48.7651],\r\n      zoom: 13\r\n    });\r\n\r\n    map.on(\"load\", function () {\r\n          map.loadImage(\"https://i.imgur.com/MK4NUzI.png\", async function(error, image) {\r\n          if (error) throw error;\r\n          await res.forEach(\r\n            sig => {\r\n            map.addImage(sig._id, image);\r\n            map.addLayer({\r\n              id: sig._id,\r\n              type: \"symbol\",\r\n              source: {\r\n                type: \"geojson\",\r\n                data: {\r\n                  type: 'FeatureCollection',\r\n                  features: [\r\n                    {\r\n                      type: 'Feature',\r\n                      properties: {\r\n                        \"description\":\"<strong>\"+ sig.name +\"</strong><p>\"+\r\n                        sig.description + \"</p> <p>Date: \"+ Moment(sig.created_date).format('DD/MM/YY Ã  HH:mm') +\r\n                        \"</p> <p><a href='\"+ `/signal/${sig._id}/` +\"'><em>Voir la fiche du signalement</em></a> </p>\"\r\n                      },\r\n                      geometry: {\r\n                      type: \"Point\",\r\n                      coordinates: [sig.localization.long, sig.localization.lat]\r\n                      }\r\n                    }\r\n                  ]\r\n                }\r\n              },\r\n              layout: {\r\n                \"icon-image\": sig._id,\r\n                \"icon-allow-overlap\": true\r\n              }\r\n            });\r\n            map.on('click', sig._id, function (e) {\r\n              var coordinates = e.features[0].geometry.coordinates.slice();\r\n              var description = e.features[0].properties.description;\r\n              while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n              coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n              }\r\n              new mapboxgl.Popup()\r\n              .setLngLat(coordinates)\r\n              .setHTML(description)\r\n              .addTo(map);\r\n              });\r\n            }\r\n          );\r\n        })\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.match.params.id !== this.props.match.params.id)\r\n      await this.loadSignal()\r\n  }\r\n\r\n  loadSignal = async () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (this._isMounted)\r\n        this.setState({\r\n          isLoading: true\r\n        });\r\n      wretch()\r\n        .url(`http://localhost:8080/signal`)\r\n        .get()\r\n        .json(res => {\r\n          if (this._isMounted)\r\n           this.setState({\r\n            isLoading: false,\r\n            items: res,\r\n          });\r\n          resolve(res)\r\n        })\r\n        .catch(err => {\r\n          console.log('err', err);\r\n          reject()\r\n        })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col lg={12}>\r\n            <Card>\r\n              <CardHeader className=\"card card-accent-warning mb-3\" >\r\n                <strong><i className=\"icon-info pr-1\"></i>Localisation</strong>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <div className='FullMap' ref={(x) => { this.Mapcontainer = x }}></div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SignalsMap;\r\n"],"sourceRoot":""}