{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { mix } from \"./mix\";\nimport conf from \"./config\";\nimport { resolver } from \"./resolver\";\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\n\nvar Wretcher =\n/** @class */\nfunction () {\n  function Wretcher(_url, _options, _catchers, _resolvers, _middlewares, _deferredChain) {\n    if (_catchers === void 0) {\n      _catchers = new Map();\n    }\n\n    if (_resolvers === void 0) {\n      _resolvers = [];\n    }\n\n    if (_middlewares === void 0) {\n      _middlewares = [];\n    }\n\n    if (_deferredChain === void 0) {\n      _deferredChain = [];\n    }\n\n    this._url = _url;\n    this._options = _options;\n    this._catchers = _catchers;\n    this._resolvers = _resolvers;\n    this._middlewares = _middlewares;\n    this._deferredChain = _deferredChain;\n  }\n\n  Wretcher.factory = function (url, options) {\n    if (url === void 0) {\n      url = \"\";\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return new Wretcher(url, options);\n  };\n\n  Wretcher.prototype.selfFactory = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.url,\n        url = _c === void 0 ? this._url : _c,\n        _d = _b.options,\n        options = _d === void 0 ? this._options : _d,\n        _e = _b.catchers,\n        catchers = _e === void 0 ? this._catchers : _e,\n        _f = _b.resolvers,\n        resolvers = _f === void 0 ? this._resolvers : _f,\n        _g = _b.middlewares,\n        middlewares = _g === void 0 ? this._middlewares : _g,\n        _h = _b.deferredChain,\n        deferredChain = _h === void 0 ? this._deferredChain : _h;\n\n    return new Wretcher(url, __assign({}, options), new Map(catchers), resolvers.slice(), middlewares.slice(), deferredChain.slice());\n  };\n  /**\n   * Sets the default fetch options used for every subsequent fetch call.\n   * @param options New default options\n   * @param mixin If true, mixes in instead of replacing the existing options\n   */\n\n\n  Wretcher.prototype.defaults = function (options, mixin) {\n    if (mixin === void 0) {\n      mixin = false;\n    }\n\n    conf.defaults = mixin ? mix(conf.defaults, options) : options;\n    return this;\n  };\n  /**\n   * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n   *\n   * Persists for every subsequent requests.\n   *\n   * Default is \"text\".\n   */\n\n\n  Wretcher.prototype.errorType = function (method) {\n    conf.errorType = method;\n    return this;\n  };\n  /**\n   * Sets the non-global polyfills which will be used for every subsequent calls.\n   *\n   * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n   *\n   * @param polyfills An object containing the polyfills.\n   */\n\n\n  Wretcher.prototype.polyfills = function (polyfills) {\n    conf.polyfills = __assign({}, conf.polyfills, polyfills);\n    return this;\n  };\n  /**\n   * Returns a new Wretcher object with the argument url appended and the same options.\n   * @param url String url\n   * @param replace Boolean If true, replaces the current url instead of appending\n   */\n\n\n  Wretcher.prototype.url = function (url, replace) {\n    if (replace === void 0) {\n      replace = false;\n    }\n\n    if (replace) return this.selfFactory({\n      url: url\n    });\n\n    var split = this._url.split(\"?\");\n\n    return this.selfFactory({\n      url: split.length > 1 ? split[0] + url + \"?\" + split[1] : this._url + url\n    });\n  };\n  /**\n   * Returns a new Wretcher object with the same url and new options.\n   * @param options New options\n   * @param mixin If true, mixes in instead of replacing the existing options\n   */\n\n\n  Wretcher.prototype.options = function (options, mixin) {\n    if (mixin === void 0) {\n      mixin = true;\n    }\n\n    return this.selfFactory({\n      options: mixin ? mix(this._options, options) : options\n    });\n  };\n  /**\n   * Converts a javascript object to query parameters,\n   * then appends this query string to the current url.\n   *\n   * If given a string, use the string as the query verbatim.\n   *\n   * ```\n   * let w = wretch(\"http://example.com\") // url is http://example.com\n   *\n   * // Chain query calls\n   * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n   * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n   *\n   * // Pass true as the second argument to replace existing query parameters\n   * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n   * ```\n   *\n   * @param qp An object which will be converted, or a string which will be used verbatim.\n   */\n\n\n  Wretcher.prototype.query = function (qp, replace) {\n    if (replace === void 0) {\n      replace = false;\n    }\n\n    return this.selfFactory({\n      url: appendQueryParams(this._url, qp, replace)\n    });\n  };\n  /**\n   * Set request headers.\n   * @param headerValues An object containing header keys and values\n   */\n\n\n  Wretcher.prototype.headers = function (headerValues) {\n    return this.selfFactory({\n      options: mix(this._options, {\n        headers: headerValues || {}\n      })\n    });\n  };\n  /**\n   * Shortcut to set the \"Accept\" header.\n   * @param headerValue Header value\n   */\n\n\n  Wretcher.prototype.accept = function (headerValue) {\n    return this.headers({\n      Accept: headerValue\n    });\n  };\n  /**\n   * Shortcut to set the \"Content-Type\" header.\n   * @param headerValue Header value\n   */\n\n\n  Wretcher.prototype.content = function (headerValue) {\n    return this.headers({\n      \"Content-Type\": headerValue\n    });\n  };\n  /**\n   * Shortcut to set the \"Authorization\" header.\n   * @param headerValue Header value\n   */\n\n\n  Wretcher.prototype.auth = function (headerValue) {\n    return this.headers({\n      Authorization: headerValue\n    });\n  };\n  /**\n   * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n   * @param errorId Error code or name\n   * @param catcher: The catcher method\n   */\n\n\n  Wretcher.prototype.catcher = function (errorId, catcher) {\n    var newMap = new Map(this._catchers);\n    newMap.set(errorId, catcher);\n    return this.selfFactory({\n      catchers: newMap\n    });\n  };\n  /**\n   * Associates a custom signal with the request.\n   * @param controller : An AbortController\n   */\n\n\n  Wretcher.prototype.signal = function (controller) {\n    return this.selfFactory({\n      options: __assign({}, this._options, {\n        signal: controller.signal\n      })\n    });\n  };\n  /**\n   * Program a resolver to perform response chain tasks automatically.\n   * @param doResolve : Resolver callback\n   */\n\n\n  Wretcher.prototype.resolve = function (doResolve, clear) {\n    if (clear === void 0) {\n      clear = false;\n    }\n\n    return this.selfFactory({\n      resolvers: clear ? [doResolve] : this._resolvers.concat([doResolve])\n    });\n  };\n  /**\n   * Defer wretcher methods that will be chained and called just before the request is performed.\n   */\n\n\n  Wretcher.prototype.defer = function (callback, clear) {\n    if (clear === void 0) {\n      clear = false;\n    }\n\n    return this.selfFactory({\n      deferredChain: clear ? [callback] : this._deferredChain.concat([callback])\n    });\n  };\n  /**\n   * Add middlewares to intercept a request before being sent.\n   */\n\n\n  Wretcher.prototype.middlewares = function (middlewares, clear) {\n    if (clear === void 0) {\n      clear = false;\n    }\n\n    return this.selfFactory({\n      middlewares: clear ? middlewares : this._middlewares.concat(middlewares)\n    });\n  };\n\n  Wretcher.prototype.method = function (method, options, body) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (body === void 0) {\n      body = null;\n    }\n\n    var baseWretcher = !body ? this : typeof body === \"object\" ? this.json(body) : this.body(body);\n    baseWretcher = baseWretcher.options(__assign({}, options, {\n      method: method\n    }));\n\n    var deferredWretcher = baseWretcher._deferredChain.reduce(function (acc, curr) {\n      return curr(acc, acc._url, acc._options);\n    }, baseWretcher);\n\n    return resolver(deferredWretcher);\n  };\n  /**\n   * Performs a get request.\n   */\n\n\n  Wretcher.prototype.get = function (options) {\n    return this.method(\"GET\", options);\n  };\n  /**\n   * Performs a delete request.\n   */\n\n\n  Wretcher.prototype.delete = function (options) {\n    return this.method(\"DELETE\", options);\n  };\n  /**\n   * Performs a put request.\n   */\n\n\n  Wretcher.prototype.put = function (body, options) {\n    return this.method(\"PUT\", options, body);\n  };\n  /**\n   * Performs a post request.\n   */\n\n\n  Wretcher.prototype.post = function (body, options) {\n    return this.method(\"POST\", options, body);\n  };\n  /**\n   * Performs a patch request.\n   */\n\n\n  Wretcher.prototype.patch = function (body, options) {\n    return this.method(\"PATCH\", options, body);\n  };\n  /**\n   * Performs a head request.\n   */\n\n\n  Wretcher.prototype.head = function (options) {\n    return this.method(\"HEAD\", options);\n  };\n  /**\n   * Performs an options request\n   */\n\n\n  Wretcher.prototype.opts = function (options) {\n    return this.method(\"OPTIONS\", options);\n  };\n  /**\n   * Replay a request.\n   */\n\n\n  Wretcher.prototype.replay = function (options) {\n    return this.method(this._options.method, options);\n  };\n  /**\n   * Sets the request body with any content.\n   * @param contents The body contents\n   */\n\n\n  Wretcher.prototype.body = function (contents) {\n    return this.selfFactory({\n      options: __assign({}, this._options, {\n        body: contents\n      })\n    });\n  };\n  /**\n   * Sets the content type header, stringifies an object and sets the request body.\n   * @param jsObject An object which will be serialized into a JSON\n   */\n\n\n  Wretcher.prototype.json = function (jsObject) {\n    return this.content(\"application/json\").body(JSON.stringify(jsObject));\n  };\n  /**\n   * Converts the javascript object to a FormData and sets the request body.\n   * @param formObject An object which will be converted to a FormData\n   */\n\n\n  Wretcher.prototype.formData = function (formObject) {\n    return this.body(convertFormData(formObject));\n  };\n  /**\n   * Converts the input to an url encoded string and sets the content-type header and body.\n   * If the input argument is already a string, skips the conversion part.\n   *\n   * @param input An object to convert into an url encoded string or an already encoded string\n   */\n\n\n  Wretcher.prototype.formUrl = function (input) {\n    return this.body(typeof input === \"string\" ? input : convertFormUrl(input)).content(\"application/x-www-form-urlencoded\");\n  };\n\n  return Wretcher;\n}();\n\nexport { Wretcher }; // Internal helpers\n\nvar appendQueryParams = function appendQueryParams(url, qp, replace) {\n  var queryString;\n\n  if (typeof qp === \"string\") {\n    queryString = qp;\n  } else {\n    var usp = conf.polyfill(\"URLSearchParams\", {\n      instance: true\n    });\n\n    for (var key in qp) {\n      if (qp[key] instanceof Array) {\n        for (var _i = 0, _a = qp[key]; _i < _a.length; _i++) {\n          var val = _a[_i];\n          usp.append(key, val);\n        }\n      } else {\n        usp.append(key, qp[key]);\n      }\n    }\n\n    queryString = usp.toString();\n  }\n\n  var split = url.split(\"?\");\n  if (replace || split.length < 2) return split[0] + \"?\" + queryString;\n  return url + \"&\" + queryString;\n};\n\nfunction convertFormData(formObject) {\n  var formData = conf.polyfill(\"FormData\", {\n    instance: true\n  });\n\n  for (var key in formObject) {\n    if (formObject[key] instanceof Array) {\n      for (var _i = 0, _a = formObject[key]; _i < _a.length; _i++) {\n        var item = _a[_i];\n        formData.append(key + \"[]\", item);\n      }\n    } else {\n      formData.append(key, formObject[key]);\n    }\n  }\n\n  return formData;\n}\n\nfunction encodeQueryValue(key, value) {\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(typeof value === \"object\" ? JSON.stringify(value) : \"\" + value);\n}\n\nfunction convertFormUrl(formObject) {\n  return Object.keys(formObject).map(function (key) {\n    var value = formObject[key];\n\n    if (value instanceof Array) {\n      return value.map(function (v) {\n        return encodeQueryValue(key, v);\n      }).join(\"&\");\n    }\n\n    return encodeQueryValue(key, value);\n  }).join(\"&\");\n}","map":{"version":3,"sources":["../src/wretcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError, ResponseChain } from \"./resolver\"\nimport { ConfiguredMiddleware } from \"./middleware\"\n\nexport type WretcherOptions = RequestInit & {\n    [key: string]: any\n}\n\nexport type DeferredCallback = (wretcher: Wretcher, url: string, options: WretcherOptions) => Wretcher\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        public _url: string,\n        public _options: WretcherOptions,\n        public _catchers: Map<number | string, (error: WretcherError, originalRequest: Wretcher) => void> = new Map(),\n        public _resolvers: Array<(resolver: ResponseChain, originalRequest: Wretcher) => any> = [],\n        public _middlewares: ConfiguredMiddleware[] = [],\n        public _deferredChain: DeferredCallback[] = []) {}\n\n    static factory(url = \"\", options: WretcherOptions = {}) { return new Wretcher(url, options) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers,\n                resolvers = this._resolvers, middlewares = this._middlewares, deferredChain = this._deferredChain } = {}) {\n        return new Wretcher(url, {...options}, new Map(catchers), [...resolvers], [...middlewares], [...deferredChain])\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param options New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(options: WretcherOptions, mixin = false) {\n        conf.defaults = mixin ? mix(conf.defaults, options) : options\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills }\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean If true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        if(replace)\n            return this.selfFactory({ url })\n        const split = this._url.split(\"?\")\n        return this.selfFactory({\n            url: split.length > 1 ?\n                split[0] + url + \"?\" + split[1] :\n                this._url + url\n        })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: WretcherOptions, mixin = true) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * If given a string, use the string as the query verbatim.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     *\n     * // Chain query calls\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n     *\n     * // Pass true as the second argument to replace existing query parameters\n     * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n     * ```\n     *\n     * @param qp An object which will be converted, or a string which will be used verbatim.\n     */\n    query(qp: object | string, replace: boolean = false) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp, replace) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: string }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues || {} }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Authorization\" header.\n     * @param headerValue Header value\n     */\n    auth(headerValue: string) {\n        return this.headers({ Authorization: headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param errorId Error code or name\n     * @param catcher: The catcher method\n     */\n    catcher(errorId: number | string, catcher: (error: WretcherError, originalRequest: Wretcher) => any) {\n        const newMap = new Map(this._catchers)\n        newMap.set(errorId, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: AbortController) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal }})\n    }\n\n    /**\n     * Program a resolver to perform response chain tasks automatically.\n     * @param doResolve : Resolver callback\n     */\n    resolve(doResolve: (chain: ResponseChain, originalRequest: Wretcher) => ResponseChain | Promise<any>, clear: boolean = false) {\n        return this.selfFactory({ resolvers: clear ? [ doResolve ] : [ ...this._resolvers, doResolve ]})\n    }\n\n    /**\n     * Defer wretcher methods that will be chained and called just before the request is performed.\n     */\n    defer(callback: DeferredCallback, clear = false) {\n        return this.selfFactory({\n            deferredChain: clear ? [callback] : [ ...this._deferredChain, callback ]\n        })\n    }\n\n    /**\n     * Add middlewares to intercept a request before being sent.\n     */\n    middlewares(middlewares: ConfiguredMiddleware[], clear = false) {\n        return this.selfFactory({\n            middlewares: clear ? middlewares : [ ...this._middlewares, ...middlewares ]\n        })\n    }\n\n    private method(method, options = {}, body = null) {\n        let baseWretcher =\n            !body ? this :\n            typeof body === \"object\" ? this.json(body) :\n            this.body(body)\n        baseWretcher = baseWretcher.options({ ...options, method })\n        const deferredWretcher = baseWretcher._deferredChain.reduce((acc: Wretcher, curr) => curr(acc, acc._url, acc._options), baseWretcher)\n        return resolver(deferredWretcher)\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(options?) {\n        return this.method(\"GET\", options)\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(options?) {\n        return this.method(\"DELETE\", options)\n    }\n    /**\n     * Performs a put request.\n     */\n    put(body?, options?) {\n        return this.method(\"PUT\", options, body)\n    }\n    /**\n     * Performs a post request.\n     */\n    post(body?, options?) {\n        return this.method(\"POST\", options, body)\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(body?, options?) {\n        return this.method(\"PATCH\", options, body)\n    }\n    /**\n     * Performs a head request.\n     */\n    head(options?) {\n        return this.method(\"HEAD\", options)\n    }\n    /**\n     * Performs an options request\n     */\n    opts(options?) {\n        return this.method(\"OPTIONS\", options)\n    }\n    /**\n     * Replay a request.\n     */\n    replay(options?) {\n        return this.method(this._options.method, options)\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        return this.body(convertFormData(formObject))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean) => {\n    let queryString\n\n    if(typeof qp === \"string\") {\n        queryString = qp\n    } else {\n        const usp = conf.polyfill(\"URLSearchParams\", { instance: true })\n        for(const key in qp) {\n            if(qp[key] instanceof Array) {\n                for(const val of qp[key])\n                    usp.append(key, val)\n            } else {\n                usp.append(key, qp[key])\n            }\n        }\n        queryString = usp.toString()\n    }\n\n    const split = url.split(\"?\")\n    if(replace || split.length < 2)\n        return split[0] + \"?\" + queryString\n\n    return url + \"&\" + queryString\n}\n\nfunction convertFormData(formObject: object) {\n    const formData = conf.polyfill(\"FormData\", { instance: true })\n    for(const key in formObject) {\n        if(formObject[key] instanceof Array) {\n            for(const item of formObject[key])\n                formData.append(key + \"[]\", item)\n        } else {\n            formData.append(key, formObject[key])\n        }\n    }\n\n    return formData\n}\n\nfunction encodeQueryValue(key: string, value: unknown) {\n    return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n        typeof value === \"object\" ?\n            JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n    return Object.keys(formObject)\n        .map(key => {\n            const value = formObject[key]\n            if(value instanceof Array) {\n                return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n            }\n            return encodeQueryValue(key, value)\n        })\n        .join(\"&\")\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}