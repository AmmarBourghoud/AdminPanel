{"ast":null,"code":"import conf from \"./config\";\n\nvar onMatch = function onMatch(entries, name, callback, _performance) {\n  if (!entries.getEntriesByName) return false;\n  var matches = entries.getEntriesByName(name);\n\n  if (matches && matches.length > 0) {\n    callback(matches.reverse()[0]);\n    if (_performance.clearMeasures) _performance.clearMeasures(name);\n    perfs.callbacks.delete(name);\n\n    if (perfs.callbacks.size < 1) {\n      perfs.observer.disconnect();\n\n      if (_performance.clearResourceTimings) {\n        _performance.clearResourceTimings();\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar lazyObserver = function lazyObserver(_performance, _observer) {\n  if (!perfs.observer && _performance && _observer) {\n    perfs.observer = new _observer(function (entries) {\n      perfs.callbacks.forEach(function (callback, name) {\n        onMatch(entries, name, callback, _performance);\n      });\n    });\n    if (_performance.clearResourceTimings) _performance.clearResourceTimings();\n  }\n\n  return perfs.observer;\n};\n\nvar perfs = {\n  callbacks: new Map(),\n  observer: null,\n  observe: function observe(name, callback) {\n    if (!name || !callback) return;\n\n    var _performance = conf.polyfill(\"performance\", {\n      doThrow: false\n    });\n\n    var _observer = conf.polyfill(\"PerformanceObserver\", {\n      doThrow: false\n    });\n\n    if (!lazyObserver(_performance, _observer)) return;\n\n    if (!onMatch(_performance, name, callback, _performance)) {\n      if (perfs.callbacks.size < 1) perfs.observer.observe({\n        entryTypes: [\"resource\", \"measure\"]\n      });\n      perfs.callbacks.set(name, callback);\n    }\n  }\n};\nexport default perfs;","map":{"version":3,"sources":["../src/perfs.ts"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,UAAjB;;AAEA,IAAM,OAAO,GAAG,SAAV,OAAU,CAAC,OAAD,EAAU,IAAV,EAAgB,QAAhB,EAA0B,YAA1B,EAAsC;AAClD,MAAG,CAAC,OAAO,CAAC,gBAAZ,EACI,OAAO,KAAP;AACJ,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAR,CAAyB,IAAzB,CAAhB;;AACA,MAAG,OAAO,IAAI,OAAO,CAAC,MAAR,GAAiB,CAA/B,EAAkC;AAC9B,IAAA,QAAQ,CAAC,OAAO,CAAC,OAAR,GAAkB,CAAlB,CAAD,CAAR;AACA,QAAG,YAAY,CAAC,aAAhB,EACI,YAAY,CAAC,aAAb,CAA2B,IAA3B;AACJ,IAAA,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,IAAvB;;AAEA,QAAG,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,CAA1B,EAA6B;AACzB,MAAA,KAAK,CAAC,QAAN,CAAe,UAAf;;AACA,UAAG,YAAY,CAAC,oBAAhB,EAAsC;AAClC,QAAA,YAAY,CAAC,oBAAb;AACH;AACJ;;AACD,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAnBD;;AAqBA,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,YAAD,EAAe,SAAf,EAAwB;AACzC,MAAG,CAAC,KAAK,CAAC,QAAP,IAAmB,YAAnB,IAAmC,SAAtC,EAAiD;AAC7C,IAAA,KAAK,CAAC,QAAN,GAAiB,IAAI,SAAJ,CAAc,UAAA,OAAA,EAAO;AAClC,MAAA,KAAK,CAAC,SAAN,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAW,IAAX,EAAe;AACnC,QAAA,OAAO,CAAC,OAAD,EAAU,IAAV,EAAgB,QAAhB,EAA0B,YAA1B,CAAP;AACH,OAFD;AAGH,KAJgB,CAAjB;AAKA,QAAG,YAAY,CAAC,oBAAhB,EACI,YAAY,CAAC,oBAAb;AACP;;AACD,SAAO,KAAK,CAAC,QAAb;AACH,CAXD;;AAaA,IAAM,KAAK,GAAG;AACV,EAAA,SAAS,EAAE,IAAI,GAAJ,EADD;AAEV,EAAA,QAAQ,EAAE,IAFA;AAGV,EAAA,OAAO,EAAE,iBAAC,IAAD,EAAO,QAAP,EAAe;AACpB,QAAG,CAAC,IAAD,IAAS,CAAC,QAAb,EACI;;AAEJ,QAAM,YAAY,GAAG,IAAI,CAAC,QAAL,CAAc,aAAd,EAA6B;AAAE,MAAA,OAAO,EAAE;AAAX,KAA7B,CAArB;;AACA,QAAM,SAAS,GAAI,IAAI,CAAC,QAAL,CAAc,qBAAd,EAAqC;AAAE,MAAA,OAAO,EAAE;AAAX,KAArC,CAAnB;;AAEA,QAAG,CAAC,YAAY,CAAC,YAAD,EAAe,SAAf,CAAhB,EACI;;AAEJ,QAAG,CAAC,OAAO,CAAC,YAAD,EAAe,IAAf,EAAqB,QAArB,EAA+B,YAA/B,CAAX,EAAyD;AACrD,UAAG,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,CAA1B,EACI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB;AAAE,QAAA,UAAU,EAAE,CAAC,UAAD,EAAa,SAAb;AAAd,OAAvB;AACJ,MAAA,KAAK,CAAC,SAAN,CAAgB,GAAhB,CAAoB,IAApB,EAA0B,QAA1B;AACH;AAEJ;AAnBS,CAAd;AAsBA,eAAe,KAAf","sourcesContent":["import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    if(!entries.getEntriesByName)\n        return false\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        if(_performance.clearMeasures)\n            _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings)\n            _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", { doThrow: false })\n        const _observer  = conf.polyfill(\"PerformanceObserver\", { doThrow: false })\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}